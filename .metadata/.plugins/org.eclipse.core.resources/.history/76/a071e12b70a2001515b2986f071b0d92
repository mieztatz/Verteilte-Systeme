package DiningPhilosophersDistribute;

import java.rmi.RemoteException;

public class Seat implements ISeat {
	
	private static final long serialVersionUID = -8600807833617312109L;

	private final int number;
	private final IFork forkRight;
	private final ITable table;
	
	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + number;
		result = prime * result + ((table == null) ? 0 : table.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Seat other = (Seat) obj;
		if (number != other.number)
			return false;
		if (table == null) {
			if (other.table != null)
				return false;
		} else
			try {
				if (table.getNumber() != other.table.getNumber())
					return false;
			} catch (RemoteException e) {
				e.printStackTrace();
				return false;
			}
		return true;
	}

	public Seat(final int number, final ITable table) {
		this.number = number;
		this.table = table;
		this.forkRight = new Fork(this);
	}
	
	public int getNumber() {
		return this.number;
	}
	
	public ITable getTable() {
		return this.table;
	}
	
	public IFork getForkRight() {
		return this.forkRight;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "Seat [number=" + number + ", table=" + table + "]";
	}

}
