package DiningPhilosophers;

import java.util.Random;

import com.sun.swing.internal.plaf.synth.resources.synth;

public class Philosopher extends Thread {
	
	/** Anzahl der Essvprgäng, welcher ein Philospoh bereits hatte.
	 *  Nach drei Essvorgängen wird der Integer wieder auf Null gesetzt.
	 *  Der Philospoh isst dann für eine längere Zeit nicht.
	 */
	private int process;
	
	/** Wenn der Philosoph isst, sitzt er temporär an einem Platz.
	 *  Dieser Platz hat eine rechte Gabel.
	 */
	private Seat seat;
	
	/** Wenn ein Philosoph einen Platz bekommen hat, dann hat er automatisch auch eine rechte Gabel. */
	private Fork forkLeft;
	
	/** Nachdem ein Philosoph eine rechte Gabel hat, muss er versuchen, von seinem Nachbarn die Gabel zu bekommen. */
	private Fork forkRight;
	
	/** Der Name eines Philosophen **/
	private final String name;
	
	private boolean isHungry;
	
	public boolean isHungry() {
		return isHungry;
	}
	
	private final Table table;

	public void setHungry(boolean isHungry) {
		this.isHungry = isHungry;
	}

	public Philosopher(final String name, final Table table) {
		this.name = name;
		this.process = 0;
		this.isHungry = true;
		this.table = table;
	}
	/**
	 * Die überschriebene Run-Methode gibt auf der Konsole aus, dass der
	 * Thread bzw. Philosoph aktiv ist.
	 * Gleich zu Beginn des Programms wird der Philosoph zum essen geschickt.
	 */
	@Override
	public void run() {
		System.out.println(this.name + " ist aktiv.");
		try {
			this.eat();
		} catch (InterruptedException e) {
			//Exceptionhandling hier besser lösen
			e.printStackTrace();
		}
	}
	
	public String getPhilosopherName() {
		return this.name;
	}
	
	public Seat getSeat() {
		return this.seat;
	}
	
	public void setSeat(final Seat seat) {
		this.seat = seat;
	}

	public int getProcess() {
		return process;
	}

	public void setProcess(final int process) {
		this.process = process;
	}

	public Fork getForkLeft() {
		return forkLeft;
	}

	/**
	 * Nimmt die Gabel für den Philosophen in Gebrauch,
	 * sodass für andere ersichtlich ist, dass dieser Platz belegt ist.
	 * Ist die Gabel null, heißt das, dass der Philosoph die Gabel wieder frei gibt.
	 * Ansonsten wird die Gabel für den Philosophen reserviert.
	 * @param forkLeft - die übergeben Gabel
	 */
	public void setForkLeft(final Fork forkLeft) {
			this.forkLeft = forkLeft;
	}

	public Fork getForkRight() {
		return forkRight;
	}

	public void setForkRight(final Fork forkRight) {
		this.forkRight = forkRight;
	}
	
	public void reserveFork(final Fork fork) {
		fork.setUsed(true);
	}
	
	public void unblockFork(final Fork fork) {
		fork.setUsed(false);
	}
	
	/** Philosophen sitzen den ganzen Tag im Meditationsraum.
	 * Bekommt ein Philosoph Hunger, betritt er den Esssaal.
	 * @throws InterruptedException
	 */
	public void meditationRoom(final long millis) throws InterruptedException {
		Thread.sleep(millis);
	}
	
	/** Hier die Logik für die Platzvergabe einfügen
	 * @throws InterruptedException 
	 * 
	 */
	public synchronized void eat() throws InterruptedException {
		this.setSeat(this.table.getAnySeat());
		System.out.println(this.getPhilosopherName() + " betrachtet Sitznummer " + seat.getNumber());
		Fork forkRight = this.getSeat().getForkRight();
		Fork forkLeft = this.table.getLeftNeighbour(this.getSeat()).getForkRight();
		boolean isWaiting = false;
		
		// alles wird über Gabeln abgefragt, ist die rechte Gabel frei, und die Gabel
		// linken Nachbarplatz auch, dann kann der Philosoph essen
		if (!forkRight.isUsed()) {
			//rechte Gabel ist frei, dann erst mal hinsetzen
			this.reserveFork(forkRight);
			if (!forkLeft.isUsed()) {
				//der Philosoph kann essen, da beide Gabeln frei sind
				philosopherCanEat(forkRight, forkLeft);
			} else {
				//der Philosoph muss warten, bis die linke Gabel frei ist
				System.out.println(this.getPhilosopherName() + " versucht, die linke Gabel zu nehmen.");
				if (tryToGetLeftFork(forkLeft)) {
					philosopherCanEat(forkRight, forkLeft);
				}
				// hier muss eine Behandlung der Situation rein
			}
			//hier muss sich jetzt um die Gabel gekümmert werden
		} else {
			//nur der rechten Gabel zuordnen, und in wait-Zustand gehen.
			isWaiting = forkRight.addPhilosopher(this);
			if (isWaiting) {
				System.out.println(this.getPhilosopherName() + "wartet, bis er essen kann.");
			} else
				System.out.println("Der Philosoph konnte nicht hinzugefügt werden");
		}
		
		
//		this.setSeat(table.getAnySeat());
//		System.out.println(this.getPhilosopherName() + " betrachtet Sitznummer " + seat.getNumber());
//		
//		for (int i = this.getSeat().getNumber(); i < table.getNumberOfSeats() && this.isHungry(); i = (i + 1 ) % table.getNumberOfSeats()) {
//
//			if (!this.getSeat().isSeatInUse()) {
//				if (!table.getLeftNeighbour(seat).getRightFork().isUsed()) {
//					this.setForkRight(seat.getRightFork());
//					this.setForkLeft(table.getLeftNeighbour(seat).getRightFork());
//					System.out.println(this.getPhilosopherName() + " isst auf Platz " + seat.getNumber() + ".");
//					this.wait(5000);
//					this.setProcess(this.getProcess() + 1);
//					this.setHungry(false);
//					//Sitz wieder freigeben
//					this.setForkRight(null);
//					this.setForkLeft(null);
//					seat.getRightFork().setUsed(false);
//					table.getLeftNeighbour(seat).getRightFork().setUsed(false);
//					this.goIntoMeditationRoom();
//				}
//			} else {
//				this.setSeat(table.getLeftNeighbour(this.getSeat()));
//			}
//				
//		}
	}
	
	public void goIntoMeditationRoom() throws InterruptedException {
		System.out.println(this.getPhilosopherName() + " meditiert.");
		Random r = new Random();
		int tmp = r.nextInt(10000);
		this.sleep(tmp);
		this.setHungry(true);
//		this.eat();
	}
	
	/**
	 * Rekursive Methode, um die linke Gabel zu bekommen.
	 *
	 * @param forkLeft
	 */
	public boolean tryToGetLeftFork(final Fork forkLeft) {
		int attempt = 0;
		boolean wasSuccessful = false;
		if (!forkLeft.isUsed()) {
			synchronized(this){
				this.reserveFork(forkLeft);
				wasSuccessful = true;
			}
		} else {
			attempt++;
			if (attempt < 4) {
				tryToGetLeftFork(forkLeft);
			}
		}
		return wasSuccessful;
	}
	
	public void philosopherCanEat(final Fork forkRight, final Fork forkLeft) {
		//die rechte Gabel ist bereits reserviert
		this.reserveFork(forkLeft);
		
		this.setForkRight(forkRight);
		this.setForkLeft(forkLeft);
		
		//essen
		try {
			System.out.println(this.getPhilosopherName() + " isst.");
			this.wait(5000);
		} catch (InterruptedException e1) {
			e1.printStackTrace();
		}
		
		this.setProcess(this.getProcess() + 1);
		this.setHungry(false);
		
		this.setForkRight(null);
		this.setForkLeft(null);
		
		//Gabeln wieder freigeben
		this.unblockFork(forkRight);
		this.unblockFork(forkLeft);
		
		//meditieren gehen
		try {
			this.goIntoMeditationRoom();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	
	

}
