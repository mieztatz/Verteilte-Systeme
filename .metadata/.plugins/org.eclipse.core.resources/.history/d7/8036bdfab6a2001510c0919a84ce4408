package DiningPhilosophersDistribute;

import java.rmi.RemoteException;
import java.util.Random;

public class Table implements ITable {
	
	private static final long serialVersionUID = -6908684959619272507L;
	
	private static final int DEFAULT_NUMBER_OF_SEATS = 10;
	
	private final ISeat[] seats;
	private final int numberOfSeats;
	private final int number;
	private final IConnectionHelper connectionhelper;

	public Table(final int numberOfSeats, final int number, final IConnectionHelper connectionHelper) {
		this.numberOfSeats = numberOfSeats;
		this.number = number;
		this.connectionhelper = connectionHelper;
		if (numberOfSeats >= 0) {
			seats = new ISeat[numberOfSeats];
		} else {
			seats = new ISeat[DEFAULT_NUMBER_OF_SEATS];
		}
		initSeats();
		System.err.println("Es wurde ein neuer Tisch initalisiert.");
	}
	
	public int getNumber() {
		return number;
	}
	
	private void initSeats() {
		for (int i = 0; i < seats.length; i++) {
			seats[i] = new Seat(i, this);
		}
	}
	
	public ISeat getSeat(int number) {
		return this.getSeats()[number];
	}
	
	public int getNumberOfSeats() {
		return numberOfSeats;
	}
	
	public ISeat[] getSeats() {
		return this.seats;
	}
	
//	/** 
//	 * Gibt den linken Nachbarn des übergebenen Platzes zurück.
//	 * Falls der übergebene Platz nicht am Tisch ist, wird NULL zurückgegeben.
//	 * Tische sind miteinander verlinkt. Die linke Gable ist immer die Gabel
//	 * des linken Tischnachbarn. Das hiesst, der Platz im Array an Stelle 0
//	 * verlinkt auf das letzte Element des anderen Tisches, falls es einen gibt.
//	 * @param other - der eigene Platz
//	 * @return seat - der links benachbarte Platz
//	 */
//	public ISeat getLeftNeighbourFormWholeTable(final ISeat other) throws RemoteException {
//		ISeat seat = null;
//		if(other.getNumber() < seats.length && other.getNumber() >= 0) {
//			if(other.getNumber() == 0) { // hier muss zum anderen Tisch verlinkt werden
//				//prüfen, ob es mehr als einen Tisch gibt und dieser Tisch enthalten ist
//				if (connectionhelper.getNumberOfTables() > 1 && connectionhelper.containsTable(this)) {
//					if (this.getNumber() == 0) {
//						seat = connectionhelper.getTable(connectionhelper.getNumberOfTables() - 1).getLastSeatOfTable();
//					} else {
//						seat = connectionhelper.getTable(this.getNumber() -1).getLastSeatOfTable();
//					}
//				}
//			} else {
//				seat = seats[other.getNumber()- 1];
//			}
//		}
//		return seat;
//	}
	
	/**
	 * Gibt den linken Nachbarn des Tisches zurück.
	 */
	public ISeat getLeftNeighbour(final ISeat other) throws RemoteException {
		return seats[(other.getNumber() + 1) % seats.length];
	}
	
	public IFork getForkOfSeat(final ISeat seat) {
		IFork fork = null;
		try {
			return seat.getForkRight();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return fork;
	}
	
	public IFork getLeftNeighbourForkOfSeat(final ISeat seat) {
		IFork fork = null;
		try {
			return this.getLeftNeighbour(seat).getForkRight();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return fork;
	}
	
//	/**
//	 * Gibt den rechten Nachbarn des übergebenen Platzes zurück.
//	 * Falls der übergeben Platz nicht am Tisch ist, wird NUll zurückgegeben.
//	 * @param other - der eigene Platz
//	 * @return seat - der rechts benachbarte Platz
//	 */
//	public ISeat getRightNeighbour(final ISeat other) {
//		ISeat seat = null;
//		try {
//			if(other.getNumber() < seats.length && other.getNumber() >= 0) {
//				if(other.getNumber() == seats.length-1) {
//					seat = seats[0];
//				} else {
//					seat = seats[other.getNumber() + 1];
//				}
//			}
//		} catch (RemoteException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		return seat;
//	}
	
	public ISeat getFirstSeat() {
		return seats[0];
	}
	
	public ISeat getAnySeat() throws RemoteException {
		Random r = new Random();
		int tmp = r.nextInt(numberOfSeats);
		return seats[tmp];
	}
	
	public ISeat getLastSeatOfTable() {
		return seats[seats.length -1];
	}

	public boolean isForkInUse(final Fork fork) {
		boolean isUsed = false;
		try {
			return this.getSeats()[fork.getSeat().getNumber()].getForkRight().isUsed();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return isUsed;
	}
	

}
