package DiningPhilosophersDistribute;

import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

/**
 * Hochschule für angewandte Wissenschaften München
 * Verteilte Softwaresysteme - Praktikum
 * WS 2015/16
 * Aufgabe 4 Verteilte Programmierung
 * @author Diana irmscher - diana.irmscher@hm.edu
 */


public class MainOne {
	
	public static void main(String args[]) {
		//jeder Tisch hat drei Sitzplätze mit einer rechten Gabel
		try {
			Registry registry = LocateRegistry.createRegistry(Registry.REGISTRY_PORT);
			
			//ConnectionHelper in die Registry einbinden
			ConnectionHelper connectionHelper = new ConnectionHelper();
			IConnectionHelper stubConnectionHelper = (IConnectionHelper) UnicastRemoteObject.exportObject(connectionHelper, 0);
			registry.bind("ConnectionHelper", stubConnectionHelper);
			
			//Tisch-1 in die Registry einbinden
			ITable table = new Table(3, 1, stubConnectionHelper);
			ITable stubTable = (ITable) UnicastRemoteObject.exportObject(table, 0);
			String tableOne = "Table-1";
			registry.bind(tableOne, stubTable);
	
			System.err.println("Server ready: Bereit zur Anmeldung.");
			
			//den Tisch im ConnectionHelper anmelden
			
			
			Philosopher[] philosophers = new Philosopher[]{ new Philosopher("Lukas", tableStub, stub, false),
															new Philosopher("Robert", tableStub, stub, false),
															new Philosopher("Bauer0", tableStub, stub, false),
															new Philosopher("Linda", tableStub, stub, false),
															new Philosopher("Tom", tableStub, stub, false),
															new Philosopher("Ersin", tableStub, stub, false),
															new Philosopher("Alu", tableStub, stub, false),
															new Philosopher("Markus", tableStub, stub, false),
															new Philosopher("Moritz", tableStub, stub, false),
															new Philosopher("Chris Pohl", tableStub, stub, false),
															new Philosopher("Friedrich", tableStub, stub, false),
															new Philosopher("Ludwig", tableStub, stub, false),
															new Philosopher("Hans", tableStub, stub, false),
															new Philosopher("Martin", tableStub, stub, false)
					};
			
			for (int i = 0; i < philosophers.length; i++) {
				philosophers[i].start();
			}
			
		} catch (Exception e) {
			System.err.println("Server exception: " + e.toString());
			e.printStackTrace();
		}
		
		
	}

}
